#include <FastLED.h>
#include <fix_fft.h>

/* fastled */
CRGBPalette16 currentPalette;
TBlendType    currentBlending;

#define LED_PIN     5
#define BRIGHTNESS  64
#define NUM_LEDS    144
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];
void flsetup() {
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
  //FastLED.setBrightness(  BRIGHTNESS );
  currentPalette = RainbowColors_p;
  currentBlending = LINEARBLEND;
}

/* /fastled */
const byte adcPin = 1;  // A0

const int BITS = 7;
const int MAX_RESULTS = 1 << BITS;

typedef int16_t VALTYPE;
#define MVTYPE 32767

volatile VALTYPE results [MAX_RESULTS];
volatile int8_t* results8 = (volatile signed char*)results;
volatile int8_t* ims8 = (volatile signed char*)results8+MAX_RESULTS;
uint8_t temporal[MAX_RESULTS/2];
volatile int resultNumber;
// http://garretlab.web.fc2.com/en/arduino/inside/hardware/arduino/avr/cores/arduino/wiring_analog.c/analogRead.html
// 32 prescale
#define D_ADSRA (bit (ADEN) | bit (ADIE) | bit (ADIF)| bit (ADPS2) | bit (ADATE))

void setup ()
  {
    //Serial.begin(115200);
    //Serial.println();
  flsetup();

  // reset Timer 1
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0;
  TCCR1B = bit (CS11) | bit (WGM12);  // CTC, prescaler of 8
  TIMSK1 = bit (OCIE1B);
  OCR1A = 39;    
  OCR1B = 39;   // 20 uS - sampling frequency 50 kHz

  //ADCSRA =  bit (ADEN) | bit (ADIE) | bit (ADIF);   // turn ADC on, want interrupt on completion
  //ADCSRA |= bit (ADPS2);  // Prescaler of 16
//  ADCSRA |= (1 << ADPS1) | (1 << ADPS0);    // 8 prescaler for 153.8 KHz
  ADMUX = bit (REFS0) | (adcPin & 7);
  ADCSRB = bit (ADTS0) | bit (ADTS2);  // Timer/Counter1 Compare Match B
  //ADCSRA |= bit (ADATE);   // turn on automatic triggering
  ADCSRA = D_ADSRA;
}

// ADC complete ISR
ISR (ADC_vect)
{
    results[resultNumber] = ADC;
    resultNumber++; 
    if(resultNumber == MAX_RESULTS)
    {
      ADCSRA = 0;  // turn off ADC
    }
} 

EMPTY_INTERRUPT (TIMER1_COMPB_vect);

const float hanning128[128] PROGMEM = {0,0.0006022718974137975,0.0024076366639015356,0.005411745017609493,0.009607359798384785,0.014984373402728013,0.021529832133895588,0.029227967408489597,0.03806023374435663,0.04800535343827833,0.059039367825822475,0.07113569499986394,0.08426519384872738,0.09839623425967753,0.1134947733186315,0.1295244373225204,0.1464466094067262,0.16422052257649078,0.18280335791817726,0.20215034775378327,0.22221488349019886,0.24294862790338917,0.2643016315870011,0.2862224532848589,0.3086582838174551,0.33155507330389,0.35485766137276886,0.378509910048368,0.40245483899193585,0.42663476277231915,0.4509914298352196,0.47546616283629095,0.49999999999999994,0.524533837163709,0.5490085701647803,0.5733652372276808,0.5975451610080641,0.6214900899516319,0.645142338627231,0.66844492669611,0.6913417161825448,0.7137775467151409,0.7356983684129988,0.7570513720966108,0.777785116509801,0.7978496522462166,0.8171966420818226,0.8357794774235092,0.8535533905932737,0.8704755626774794,0.8865052266813684,0.9016037657403224,0.9157348061512727,0.928864305000136,0.9409606321741775,0.9519946465617217,0.9619397662556434,0.9707720325915103,0.9784701678661044,0.985015626597272,0.9903926402016152,0.9945882549823906,0.9975923633360984,0.9993977281025862,1,0.9993977281025862,0.9975923633360985,0.9945882549823906,0.9903926402016152,0.985015626597272,0.9784701678661045,0.9707720325915103,0.9619397662556435,0.9519946465617217,0.9409606321741775,0.9288643050001361,0.9157348061512727,0.9016037657403224,0.8865052266813686,0.8704755626774796,0.8535533905932738,0.8357794774235093,0.817196642081823,0.7978496522462166,0.7777851165098011,0.7570513720966109,0.735698368412999,0.7137775467151413,0.6913417161825451,0.66844492669611,0.6451423386272312,0.621490089951632,0.5975451610080643,0.5733652372276812,0.5490085701647802,0.524533837163709,0.5000000000000001,0.4754661628362912,0.45099142983521995,0.42663476277231904,0.40245483899193585,0.3785099100483681,0.354857661372769,0.3315550733038902,0.30865828381745497,0.28622245328485896,0.2643016315870012,0.24294862790338922,0.22221488349019908,0.2021503477537836,0.1828033579181772,0.16422052257649083,0.14644660940672632,0.12952443732252056,0.11349477331863173,0.09839623425967747,0.08426519384872738,0.071135694999864,0.059039367825822586,0.04800535343827844,0.03806023374435674,0.029227967408489597,0.021529832133895588,0.014984373402728013,0.00960735979838484,0.005411745017609548,0.0024076366639015356,0.0006022718974137975};
const float hanning256[256] PROGMEM = {0,0.00015059065189787502,0.0006022718974137975,0.0013547716606548965,0.0024076366639015356,0.0037602327006450165,0.005411745017609493,0.007361178805529389,0.009607359798384785,0.012148934980735715,0.014984373402728013,0.01811196710228008,0.021529832133895588,0.025235909703481663,0.029227967408489597,0.03350360058263052,0.03806023374435663,0.042895122148234655,0.04800535343827833,0.05338784940224234,0.059039367825822475,0.06495650444564427,0.07113569499986394,0.07757321737514644,0.08426519384872738,0.09120759342420814,0.09839623425967753,0.10582678618669683,0.1134947733186315,0.12139557674675772,0.1295244373225204,0.1378764585242665,0.1464466094067262,0.15522972763146653,0.16422052257649078,0.17341357852311157,0.18280335791817726,0.1923842047096866,0.20215034775378327,0.21209590429107733,0.22221488349019886,0.23250119005645137,0.24294862790338917,0.2535509038851079,0.2643016315870011,0.2751943351726967,0.2862224532848589,0.29737934299750507,0.3086582838174551,0.3200524817325059,0.33155507330389,0.3431591298005542,0.35485766137276886,0.3666436212625508,0.378509910048368,0.39044937992156514,0.40245483899193585,0.4145190556198493,0.42663476277231915,0.4387946624003919,0.4509914298352196,0.4632177182001663,0.47546616283629095,0.48772938573854385,0.49999999999999994,0.512270614261456,0.524533837163709,0.5367822817998337,0.5490085701647803,0.5612053375996081,0.5733652372276808,0.5854809443801506,0.5975451610080641,0.6095506200784349,0.6214900899516319,0.6333563787374492,0.645142338627231,0.6568408701994457,0.66844492669611,0.6799475182674941,0.6913417161825448,0.7026206570024949,0.7137775467151409,0.7248056648273034,0.7356983684129988,0.746449096114892,0.7570513720966108,0.7674988099435485,0.777785116509801,0.7879040957089227,0.7978496522462166,0.8076157952903134,0.8171966420818226,0.8265864214768883,0.8357794774235092,0.8447702723685335,0.8535533905932737,0.8621235414757333,0.8704755626774794,0.8786044232532424,0.8865052266813684,0.8941732138133032,0.9016037657403224,0.9087924065757917,0.9157348061512727,0.9224267826248536,0.928864305000136,0.9350434955543556,0.9409606321741775,0.9466121505977576,0.9519946465617217,0.9571048778517653,0.9619397662556434,0.9664963994173694,0.9707720325915103,0.9747640902965183,0.9784701678661044,0.98188803289772,0.985015626597272,0.9878510650192642,0.9903926402016152,0.9926388211944706,0.9945882549823906,0.996239767299355,0.9975923633360984,0.9986452283393451,0.9993977281025862,0.9998494093481021,1,0.9998494093481021,0.9993977281025862,0.9986452283393451,0.9975923633360985,0.996239767299355,0.9945882549823906,0.9926388211944707,0.9903926402016152,0.9878510650192642,0.985015626597272,0.98188803289772,0.9784701678661045,0.9747640902965184,0.9707720325915103,0.9664963994173694,0.9619397662556435,0.9571048778517653,0.9519946465617217,0.9466121505977576,0.9409606321741775,0.9350434955543557,0.9288643050001361,0.9224267826248536,0.9157348061512727,0.9087924065757919,0.9016037657403224,0.8941732138133032,0.8865052266813686,0.8786044232532424,0.8704755626774796,0.8621235414757336,0.8535533905932738,0.8447702723685335,0.8357794774235093,0.8265864214768885,0.817196642081823,0.8076157952903136,0.7978496522462166,0.7879040957089226,0.7777851165098011,0.7674988099435487,0.7570513720966109,0.7464490961148921,0.735698368412999,0.7248056648273035,0.7137775467151413,0.7026206570024952,0.6913417161825451,0.679947518267494,0.66844492669611,0.6568408701994457,0.6451423386272312,0.6333563787374492,0.621490089951632,0.6095506200784351,0.5975451610080643,0.5854809443801509,0.5733652372276812,0.561205337599608,0.5490085701647802,0.5367822817998337,0.524533837163709,0.5122706142614561,0.5000000000000001,0.48772938573854396,0.4754661628362912,0.4632177182001665,0.45099142983521995,0.4387946624003922,0.42663476277231904,0.41451905561984936,0.40245483899193585,0.39044937992156514,0.3785099100483681,0.3666436212625509,0.354857661372769,0.3431591298005544,0.3315550733038902,0.3200524817325062,0.30865828381745497,0.297379342997505,0.28622245328485896,0.2751943351726967,0.2643016315870012,0.25355090388510804,0.24294862790338922,0.23250119005645153,0.22221488349019908,0.21209590429107755,0.2021503477537836,0.19238420470968648,0.1828033579181772,0.17341357852311162,0.16422052257649083,0.15522972763146659,0.14644660940672632,0.13787645852426667,0.12952443732252056,0.12139557674675788,0.11349477331863173,0.10582678618669705,0.09839623425967747,0.09120759342420814,0.08426519384872738,0.0775732173751465,0.071135694999864,0.06495650444564433,0.059039367825822586,0.05338784940224245,0.04800535343827844,0.042895122148234766,0.03806023374435674,0.03350360058263052,0.029227967408489597,0.025235909703481663,0.021529832133895588,0.01811196710228008,0.014984373402728013,0.01214893498073577,0.00960735979838484,0.007361178805529445,0.005411745017609548,0.0037602327006450165,0.0024076366639015356,0.0013547716606548965,0.0006022718974137975,0.00015059065189787502};

void loop () {

  while (resultNumber < MAX_RESULTS)
    { }
  VALTYPE mv = 0;
  /*for(int i=0;i<MAX_RESULTS;++i) {
    if (results[i] > mv) mv = results[i];
  }
  mv = MVTYPE/mv;*/
  results[1] = results[2];
  results[0] = results[1];
  mv = 1;
  long sum = 0;
  for(int i=0;i<MAX_RESULTS-1;++i) {
    //results[i] *= mv * pgm_read_float(&hanning[i]);
    sum += results[i];
    /*if (results[i]>mv) {
      mv = results[i];
    }*/
  }
  sum /= MAX_RESULTS;
  //mv-=sum;
  //mv=255/mv-2;
  mv = 10;
  //Serial.println(mv);
  for(int i=0;i<MAX_RESULTS-1;++i) {
    results[i]-=sum;
    results[i] *= mv * pgm_read_float(&hanning128[i]);
    results8[i] = results[i];
  }
  for(int i=0;i<MAX_RESULTS-1;++i) {
    ims8[i] = 0;
  }
  fix_fft(results8, ims8, BITS, 0);

  //FillLEDsFromPaletteColors( startIndex);
  
  //FastLED.delay(1000 / UPDATES_PER_SECOND);
  
  uint8_t brightness = 255;
  int bound = 10;  
  int ubound = 250;
  int offs = 2;  
  int xscale = 4;
  int limit = NUM_LEDS;
  int vres = 1;
  for(int i=offs;i<MAX_RESULTS/2;++i) {
    float rval = sqrt(results8[i]*results8[i]+ims8[i]*ims8[i]);
    rval = 20 * log10(rval) * 6;
    rval/=vres;
    rval=round(rval);
    rval *= vres;
    if (rval < bound) rval = bound;
    if (rval > ubound) rval = ubound;
    CRGB color = ColorFromPalette( currentPalette, rval, rval, currentBlending);
    uint8_t base = (i-offs)*xscale;
    for(int t = 0;t<xscale&&base+t<limit;++t) {
      //CRGB color = ColorFromPalette( currentPalette, base+t, rval, currentBlending);
      leds[base+t] = color;
    }
  }

  FastLED.show();
  //FastLED.delay(1000/50);
  /*for(int i=1;i<MAX_RESULTS/2-1;++i) {
    Serial.println(results[i]);
  }*/

  resultNumber = 0;
  ADCSRA =  D_ADSRA; 
}
